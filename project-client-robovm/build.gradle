apply plugin: 'java'
apply plugin: 'robovm'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

configurations {

    natives

}

dependencies {

    compile project(":project-client")

    compile "org.robovm:robovm-rt:$ROBOVM_VERSION"
    compile "org.robovm:robovm-cocoatouch:$ROBOVM_VERSION"
    compile "com.badlogicgames.gdx:gdx-backend-robovm:$GDX_VERSION"

    natives "com.badlogicgames.gdx:gdx-platform:$GDX_VERSION:natives-ios"

}

ext {
    mainClassName = "com.project.client.robovm.Main"
}

task copyNatives << {
    file("build/libs/ios/").mkdirs();
    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-ios.jar")) outputDir = file("build/libs/ios")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.a"
            }
        }
    }
}

task updateRoboVMXML << {
    def xml = file('robovm.xml')

    if (!xml.exists()) {
        return
    }

    // Find all native (*.a) libraries beneath libs
    def libtree = fileTree(dir: 'build/libs', include: '**/*.a')

    def config = new groovy.util.XmlParser().parse(xml)
    config.libs.each { libs ->
        libs.children().clear()
        libtree.each { File file ->
            libs.appendNode('lib', 'build/libs/ios/' + file.getName())
        }
    }

    def writer = new FileWriter(xml)
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace true
    printer.print(config)
}

updateRoboVMXML.dependsOn copyNatives
build.dependsOn updateRoboVMXML

launchIPhoneSimulator.dependsOn build
launchIPadSimulator.dependsOn build
launchIOSDevice.dependsOn build
createIPA.dependsOn build